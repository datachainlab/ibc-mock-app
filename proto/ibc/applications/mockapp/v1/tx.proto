syntax = "proto3";

package ibc.applications.mockapp.v1;

option go_package = "github.com/datachainlab/ibc-mock-app/types";

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "ibc/core/client/v1/client.proto";

// Msg defines the mockapp Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // SendPacket defines a rpc handler method for MsgSendPacket.
  rpc SendPacket(MsgSendPacket) returns (MsgSendPacketResponse);
}

// MsgSendPacket defines a msg to send an arbitrary message between chains.
message MsgSendPacket {
  option (cosmos.msg.v1.signer) = "sender";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // the port on which the packet will be sent
  string source_port = 1 [(gogoproto.moretags) = "yaml:\"source_port\""];
  // the channel by which the packet will be sent
  string source_channel = 2 [(gogoproto.moretags) = "yaml:\"source_channel\""];
  // the message
  string message = 3 [(gogoproto.moretags) = "yaml:\"message\""];
  // the sender address
  string sender = 4 [(gogoproto.moretags) = "yaml:\"sender\""];
  // Timeout height relative to the current block height.
  // The timeout is disabled when set to 0.
  ibc.core.client.v1.Height timeout_height = 5
      [(gogoproto.moretags) = "yaml:\"timeout_height\"", (gogoproto.nullable) = false];
  // Timeout timestamp in absolute nanoseconds since unix epoch.
  // The timeout is disabled when set to 0.
  uint64 timeout_timestamp = 6 [(gogoproto.moretags) = "yaml:\"timeout_timestamp\""];
}

// MsgSendPacketResponse defines the Msg/SendPacket response type.
message MsgSendPacketResponse {}
